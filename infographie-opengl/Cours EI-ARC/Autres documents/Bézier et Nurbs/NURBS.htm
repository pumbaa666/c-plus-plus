<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0058)http://www.cs.wpi.edu/~matt/courses/cs563/talks/nurbs.html -->
<HTML><HEAD><TITLE>NURBS</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2800.1106" name=GENERATOR></HEAD>
<BODY>
<H1>About Nonuniform Rational B-Splines - NURBS </H1>
<H3>a summary by Markus Altmann </H3>NURBS are industry standard tools for the 
representation and design of geometry [ROGERS]. Some reasons for the use of 
NURBS are, that they: [PIEGL][ROGERS]
<P>
<UL>
  <LI>offer one common mathematical form for both, standard analytical shapes 
  (e.g. conics) and free form shapes;
  <P></P>
  <LI>provide the flexibility to design a large variety of shapes;
  <P></P>
  <LI>can be evaluated reasonably fast by numerically stable and accurate 
  algorithms;
  <P></P>
  <LI>are invariant under affine as well as perspective transformations;
  <P></P>
  <LI>are generalizations of non-rational B-splines and non-rational and 
  rational Bezier curves and surfaces.
  <P></P></LI></UL>However, one of the drawbacks NURBS have, is the need for extra 
storage to define traditional shapes (e.g. circles). This results from 
parameters in addition to the control points, but finally allow the desired 
flexibility for defining parametric shapes. NURBS-shapes are not only defined by 
control points; weights, associated with each control point are also necessary. 
A NURBS curve C(u), for examples, which is a vector-valued piecewise rational 
polynomial function, is defined as: [PIEGL]
<P><PRE>		sum(i = 0, n){w_i * P_i * N_i,k(u)}
	C(u) = -------------------------------------,	 (1)
	   	  sum(i = 0, n){w_i * N_i,k(u)}
</PRE>
<P>where<PRE>	w_i : weights
	P_i : control points (vector)
	N_i,k : normalized B-spline basis functions of degree k
</PRE>
<P>These B-splines are defined recursively as:
<P><PRE>	        u - t_i
   N_i,k(u) = ----------- * N_i,k-1(u) +
	      t_i+k - t_i

		t_i+k+1 - u
	      ---------------  * N_i+1,k-1(u)	(2)
	      t_i+k+1 - t_i+1
</PRE>and<BR><PRE>                    / 1, if t_i &lt;= u &lt; t_i+1
	N_i,0(u) = &lt;
                    \ 0, else
</PRE>
<P>where t_i are the knots forming a knot vector
<P><PRE>	U = { t_0, t_1, ... , t_m }.<P>
</P></PRE><BR>
<H2>The Knot Vector</H2>The knot vector uniquely determines the B-splines as it 
is obvious from (2). The relation between the number of knots (m+1), the degree 
(k) of N_i,k and the number of control points (n+1) is given by m = n + k + 1 
[PEIGL][ROGERS].
<P>The sequence of knots in the knot vector U is assumed to be nondecreasing, 
i.e. t_i &lt;= t_i+1. Each successive pair of knots represents an interval [t_i, 
t_i+1) for the parameter values to calculate a segment of a shape [FOLEY][WATT].
<P>For NURBS, the relative parametric intervals (knot spans) need not be the 
same for all shape segments, i.e. the knot spacing is nonuniform, leading to a 
non-periodic knot vector of the form
<P><PRE>   U = { a, ... , a, t_k+1, ... , t_m-k-1, b, ... , b },   (3)
</PRE>
<P>where a and b are repeated with multiplicity of k+1 [ROGERS][PIEGL]. The 
multiplicity of a knot affects the parametric continuity at this knot [FOLEY]. 
Non-periodic B-splines, like NURBS, are infinitely continuously differentiable 
in the interior of a knot span and k-M-1 times continuously differentiable at a 
knot, where M is the multiplicity of the knot [ROGERS]. (In contrast, a periodic 
knot vector U = { 0, 1, ... , n } is everywhere k-1 times continuously 
differentiable.) Considering the knot vector for NURBS, the end knot points 
(t_k, t_n+1) with multiplicity k+1 coincide with the end control points P_0, 
P_n.
<P>Since the knot spacing could be nonuniform, the B-splines are no longer the 
same for each interval [t_i, t_i+1) and the degree of the B-Spline can vary 
[WATT][FOLEY]. Considering the whole range of parameter values represented by 
the knot vector, the different B-splines build up continuous (overlapping) 
blending functions N_i,k(u), as defined in (2), over this range (Fig. 1) [WATT]. 
These blending functions have the following properties: [WATT][ROGERS]
<P>
<OL>
  <LI>N_i,k(u) &gt;= 0, for all i, k, u;
  <P></P>
  <LI>N_i,k(u) = 0, if u not in [t_i, t_i+k+1), meaning local support of k+1 
  knot spans, where N_i,k(u) is nonzero;
  <P></P>
  <LI>if u in [t_i, t_i+1), the non-vanishing blending functions are N_i-k,k(u), 
  ..., N_i,k(u)
  <P></P>
  <LI>sum(j=i-k, i){N_j,k(u)} = sum(i=0, n){N_i,k(u)} = 1, (partition of unity)
  <P></P>
  <LI>in case of multiple knots, 0/0 is deemed to be zero.
  <P></P></LI></OL>1. and 4. together result into the convex hull, the control 
points build up for a shape defined by NURBS [WATT]. 2. and 3. show, that k+1 
successive control points define a shape segment, and a control point is 
involved in k+1 neighboring shape segments. Therefore, changing a control point 
or weight influences just k+1 shape segments, defined over the interval given in 
2.
<P>
<H2>Curve/Surface Definition</H2>The previous definition of a NURBS-curve (1) 
can be rewritten using rational basis functions [PEIGL][ROGERS][WATT]
<P><PRE>			  w_i * N_i,k(u)
	R_i,k(u) = ----------------------------
		   sum(j = 0, n){w_j * N_j,k(u)}
</PRE>into<PRE>	C(u) = sum(i = 0, n){P_i * R_i,k(u)}.
</PRE><IMG src="NURBS_fichiers/basfct.gif"><BR><B>Fig. 1:</B> Cubic NURBS curve 
with associated blending functions.
<P>A NURBS-surface is define in a similar way:
<P><PRE>    S(u, v) = sum(i = 0, n)sum(j = 0, m) P_i,j * R_i,k, j,l(u, v) ,
</PRE>where<PRE>			         w_i,j * N_i,k(u) * N_j,l(v)
R_i,k,j,l(u, v) = ---------------------------------------------------------
		  sum(r = 0, n){sum(s = 0, m){w_r,s * N_r,k(u) * N_s,l(u)}}
</PRE>
<P>The rational basis functions have the same properties as the blending 
functions [PEIGL][ROGERS]. One point to emphasize, is their invariance under 
affine and (even) perspective transformations. Therefore, only the control 
points have to be transformed to get the appropriate transformation of the NURBS 
shape.
<P>
<H2>Computational Algorithm</H2>NURBS can be evaluated effectively by using 
homogeneous coordinates [PEIGL][ROGERS]. The following steps perform the 
evaluation:
<P>
<OL>
  <LI>add one dimension to the control points (e.g. P = (x, y) -&gt; P'(x, y, 
  1)) and multiply them by their corresponding weights, i.e. in 2D: P_i(x_i, 
  y_i) -&gt; P_i'(w_i * x_i, w_i * y_i, w_i)
  <P></P>
  <LI>calculate NURBS in homogeneous coordinates:
  <P><PRE>   C'(u) = sum(i = 0, n){P_i'(u) * N_i,k(u)}
</PRE>
  <LI>map "homogeneous" NURBS back to original coordinate system with:
  <P></P></LI></OL><PRE>                             / ( X1/W, X2/W, ... , Xn/W ), if W not = 0
 map( X1, X2, ... ,Xn, W) = &lt;
                             \ ( X1, X2, ... , Xn ), if W = 0

			 sum(i = 0, n){w_i * P_i * N_i,k(u)}
   C(u) = map( C'(u) ) = -----------------------------------
			    sum(i = 0, n){w_i * N_i,k(u)}
</PRE>
<P>For u in [t_i, t_i+1), the only existing blending functions to consider in 
evaluation of the curve at u are N_i-k,k(u), ..., N_i,k(u). An effective 
algorithm for the computation of the non-vanishing blending functions exists in 
[deBOOR pp. 132 - 135]. 
<H2>The Weights</H2>As mentioned above, changing the weight w_i of a control 
point P_i affects only the range [t_i, t_i+k+1) (in case of a curve). The 
geometric meaning of the weights is shown as follows (Fig. 2) [PEIGL][ROGERS].
<P>Defining the points:
<P><PRE>		B = C(u; w_i = 0)
		N = C(u; w_i = 1)
		B_i = C(u; w_i not = {0, 1})
</PRE>
<P><IMG src="NURBS_fichiers/weights.gif"><BR><B>Fig. 2</B>: Geometric meaning of 
weights (w_3).
<P>N and B_i can also be expressed as:
<P><PRE>		N = (1 - <I>a</I>) * B + <I>a</I> * P_i
		B_i = (1 - <I>b</I>) * B + <I>b</I> * P_i ,</PRE>where<PRE>		<I>a</I> = R_i,k(u; w_i = 1)
		<I>b</I> = R_i,k(u).
</PRE>
<P>The following identity is obtained from the expression of <I>a</I> and 
<I>b</I>:
<P><PRE>	(1 - <I>a</I>)/<I>a</I> : (1 - <I>b</I>)/<I>b</I> = P_iN/BN : P_iB_i/BB_i = w_i ,
</PRE>
<P>which is called the cross- or double ratio of the four points P_i, B, N, B_i. 
From these expressions, the effect of shape modification can be derived:
<P>
<UL>
  <LI>B_i sweeps out on a straight line segment
  <P></P>
  <LI>if w_i = 0 then P_i has no effect on shape
  <P></P>
  <LI>if w_i increases, so <I>b</I> and the curve is pulled toward P_i and 
  pushed away from P_j, for j not= i
  <P></P>
  <LI>if w_i decreases, so <I>b</I> and the curve is pushed away from P_i and 
  pulled toward P_j, for j not= i
  <P></P>
  <LI>if w_i -&gt; infinity then b -&gt; 1 and B_i -&gt; P_i, if u in [t_i, 
  t_i+k+1)
  <P></P></LI></UL>
<HR>
<B>References:</B>
<P>
<DL>
  <DT>[deBOOR] 
  <DD>C. deBoor,<BR><I>"A Practical Guide to Splines"</I>,<BR>1978, New York, 
  Springer-Verlag
  <P></P>
  <DT>[FOLEY] 
  <DD>James D. Foley et al.,<BR><I>"Introduction to Computer Graphics"</I>, 
  <BR>1994, Addision-Wesley
  <P></P>
  <DT>[PEIGL] 
  <DD>Les Piegl<BR>"On NURBS: A Survey", <BR>Jan 01, 1991, <I>IEEE Computer 
  Graphics and Applications</I>, Vol. 11, No. 1, pp. 55 - 71
  <P></P>
  <DT>[ROGERS] 
  <DD>David F. Rogers, Rae A. Earnshaw (editors),<BR><I>"State of the Art in 
  Computer Graphics - Visualization and Modeling"</I>,<BR>1991, New York, 
  Springer-Verlag, pp. 225 - 269
  <P></P>
  <DT>[WATT] 
  <DD>Alan Watt, Mark Watt, <BR><I>"Advanced Animation and Rendering 
  Techniques"</I>, <BR>1992, New York, AMC press, Addision-Wesley
  <P>
  <HR>

  <P>
  <P align=center><A 
  href="http://www.cs.wpi.edu/~matt/courses/cs563/talks95.html"><IMG 
  alt="[Return to CS563 '95 talks list]" src="NURBS_fichiers/back.gif" 
  border=0></A> 
  <ADDRESS>Markus Altmann / <A 
  href="http://www.wpi.edu/cgi-bin/finger?madwpi@cs">http://www.wpi.edu/cgi-bin/finger?madwpi@cs</A> 
  </ADDRESS></DD></DL></BODY></HTML>
